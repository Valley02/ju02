7주차 과제 

데이터와 UI 로직 분리, 왜 중요한가?
앱 개발을 하다 보면 데이터를 어떻게 화면에 보여줄지 고민하게 되는데, 이때 데이터(값)와 그 값을 화면에 표현하는 로직을 분리하는 게 정말 중요하다는 걸 경험하게 됩니다.

1. 유지보수가 훨씬 쉬워집니다
데이터 처리와 화면(UI) 코드가 뒤섞여 있으면, 나중에 뭔가를 고치거나 추가할 때 어디를 손봐야 할지 헷갈릴 수밖에 없습니다. 반대로, 데이터와 UI가 따로 관리되면 수정이 필요한 부분만 집중해서 빠르게 고칠 수 있어요.

2. 코드 재사용이 쉬워집니다
한 번 만든 데이터 처리 로직을 여러 화면에서 재활용할 수 있습니다. 예를 들어, 상품 가격 계산하는 함수가 따로 분리돼 있으면, 리스트 화면이든 상세 화면이든 똑같이 쓸 수 있어서 중복도 줄고, 개발 속도도 빨라집니다.

3. 테스트가 편해집니다
UI랑 분리된 로직은 화면을 띄우지 않아도 따로 테스트할 수 있습니다. 단위 테스트를 통해 버그를 미리 잡을 수 있고, 전체 앱의 안정성도 높아집니다.

4. 확장성과 유연성이 좋아집니다
나중에 새로운 화면을 추가하거나, 모바일뿐 아니라 웹 등 다른 플랫폼에 똑같은 데이터를 보여주고 싶을 때, 데이터 로직이 분리돼 있으면 UI만 새로 만들면 됩니다. 데이터 쪽은 건드릴 필요가 없으니 훨씬 유연하게 대처할 수 있죠.

5. 아키텍처 패턴 설계가 쉬워집니다
MVC, MVVM 같은 구조적인 설계를 적용할 수 있어서, 코드가 더 체계적으로 관리되고 협업할 때도 훨씬 편해집니다.

###기존코드드

import 'package:flutter/material.dart';
import 'package:carousel_slider/carousel_slider.dart';

final dummyItems = [
  'https://cdn.pixabay.com/photo/2018/11/12/18/44/thanksgiving-3811492_1280.jpg',
  'https://cdn.pixabay.com/photo/2019/10/30/15/33/tajikistan-4589831_1280.jpg',
  'https://cdn.pixabay.com/photo/2019/11/25/16/15/sfari-4652364_1280.jpg',
];

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: MyHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  var _index = 0;
  var _pages = [Page1(), Page2(), Page3()]; // 페이지들 선언을 수정

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.white,
        title: Text('복잡한 UI'),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.add, color: Colors.black),
            onPressed: () {},
          ),
        ],
      ),
      body: _pages[_index], // 페이지 변경 시 _pages 사용
      bottomNavigationBar: BottomNavigationBar(
        onTap: (index) {
          setState(() {
            _index = index;
          });
        },
        currentIndex: _index,
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(label: '홈', icon: Icon(Icons.home)),
          BottomNavigationBarItem(label: '이용서비스', icon: Icon(Icons.assignment)),
          BottomNavigationBarItem(
            label: '내 정보',
            icon: Icon(Icons.account_circle),
          ),
        ],
      ),
    );
  }
}

class Page1 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ListView(
      children: <Widget>[_buildTop(), _buildMiddle(), _buildBottom()],
    );
  }

  Widget _buildTop() {
    return Padding(
      padding: const EdgeInsets.all(16.0), // 전체 여백 추가
      child: Column(
        children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>[
              GestureDetector(
                onTap: () {
                  print('택시 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('택시'),
                  ],
                ),
              ),
              GestureDetector(
                onTap: () {
                  print('블랙 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('블랙'),
                  ],
                ),
              ),
              GestureDetector(
                onTap: () {
                  print('바이크 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('바이크'),
                  ],
                ),
              ),
              GestureDetector(
                onTap: () {
                  print('대리 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('대리'),
                  ],
                ),
              ),
            ],
          ),
          SizedBox(height: 20), // 두 줄 사이에 여백 추가
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>[
              GestureDetector(
                onTap: () {
                  print('택시 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('택시'),
                  ],
                ),
              ),
              GestureDetector(
                onTap: () {
                  print('블랙 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('블랙'),
                  ],
                ),
              ),
              GestureDetector(
                onTap: () {
                  print('바이크 클릭');
                },
                child: Column(
                  children: <Widget>[
                    Icon(Icons.local_taxi, size: 40),
                    Text('바이크'),
                  ],
                ),
              ),
              Opacity(
                opacity: 0.0, // 이 부분은 여전히 보이지 않게 처리됩니다.
                child: GestureDetector(
                  onTap: () {
                    print('택시 클릭');
                  },
                  child: Column(
                    children: <Widget>[
                      Icon(Icons.local_taxi, size: 40),
                      Text('택시'),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMiddle() {
    return CarouselSlider(
      options: CarouselOptions(
        height: 150,
        autoPlay: true,
      ),
      items: dummyItems.map((url) {
        return Builder(
          builder: (BuildContext context) {
            return Container(
              width: MediaQuery.of(context).size.width,
              margin: EdgeInsets.symmetric(horizontal: 5.0),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(8.0),
                child: Image.network(
                  url,
                  fit: BoxFit.cover,  // BoxFit.cover로 수정
                ),
              ),
            );
          },
        );
      }).toList(),
    );
  }

  Widget _buildBottom() {
    final items = List.generate(10, (i) {
      return ListTile(
        leading: Icon(Icons.notifications_none),
        title: Text('[이벤트] 이것은 공지사항입니다'),
      );
    });

    return ListView(
      physics: NeverScrollableScrollPhysics(),
      shrinkWrap: true,
      children: items,
    );
  }
}

class Page2 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('이용서비스', style: TextStyle(fontSize: 40)));
  }
}

class Page3 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('내 정보', style: TextStyle(fontSize: 40)));
  }
}


ex) 수정코드

Widget build(BuildContext context) {
  final price = fetchPriceFromAPI();
  return Text('최종 가격: ${price * 1.1}');
}
