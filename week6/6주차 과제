Flutter 애플리케이션에서 위젯의 생명주기와 화면 전환 메커니즘 요약&정리
StatefulWidget을 중심으로 UI 컴포넌트의 생성부터 소멸까지의 과정을 이해하는 것이 포인트

1. 위젯 생명주기 단계
initState()
위젯이 생성될 때 최초 1회 실행되며, API 호출이나 초기값 설정과 같은 무거운 작업을 처리합니다. 이 메서드 내에서는 반드시 super.initState()를 호출해야 합니다.

build()
화면 재구성이 필요할 때마다 반복 호출되는 메서드로, 순수한 UI 렌더링 로직만 포함
복잡한 계산이나 네트워크 요청은 initState()에서 처리하는 것이 좋다

dispose()
위젯이 완전히 제거되기 직전에 호출되며, 스트림 해제나 타이머 취소 등의 정리 작업을 수행한다

2. 화면 전환 구조
스택 메커니즘

dart
// 새 화면 추가
Navigator.push(
  context,
  MaterialPageRoute(builder: (context) => DetailScreen())
);

// 현재 화면 제거
Navigator.pop(context);
push(): 새로운 화면을 스택 최상단에 추가

pop(): 현재 화면을 스택에서 제거하고 이전 화면 복원

페이지 전환 시 이전 화면의 build() 메서드가 재실행될 수 있음

3. 전형적인 실행 흐름
앱 시작 시

text
MainPage initState()
MainPage build()
DetailScreen 추가 시

text
DetailScreen initState()
DetailScreen build()
MainPage build()  // 백그라운드 상태 유지
DetailScreen 제거 시

text
MainPage build()
DetailScreen dispose()
4. 핵심 원칙 요약
생명주기 분리: 초기화(initState) → 렌더링(build) → 정리(dispose) 단계를 명확히 구분

화면 상태 보존: push/pop 동작 시 이전 화면의 상태가 자동으로 유지됨

리소스 관리: dispose()에서 반드시 사용한 자원을 해제해야 메모리 누수 방지 가능

빌드 최적화: build() 메서드는 빈번하게 실행되므로 가볍게 유지해야 성능 저하 방지

이 원리를 이해하면 복잡한 화면 흐름을 구현할 때 예기치 않은 위젯 동작을 효과적으로 방지할 수 있습니다. 특히 네비게이션 스택 관리와 생명주기 메서드의 적절한 활용이 안정적인 앱 개발의 핵심입니다.
